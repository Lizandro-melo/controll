// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tipo_User {
  MASTER
  ADMIN
  OPERADOR
  CLIENTE
}

enum redes {
  WHATSAPP
  TELEGRAM
  FACEBOOK
  LINKEDIN
  URL
}

enum status_veiculo {
  LIVRE
  ALUGADO
}

enum tipo_veiculo {
  MOTO
  CARRO
}

enum tipo_peca {
  PNEU

  PASTILHA_FREIO
  DISCO_FREIO
  SAPATA_FREIO

  EMBREAGEM_PLATO
  EMBREAGEM_DISCO
  EMBREAGEM_ROLAMENTO
  MOLAS_EMBREAGEM

  CORRENTE_TRANSMISSAO
  COROA_TRANSMISSAO
  PINHAO_TRANSMISSAO

  CORREIA_DENTADA
  CORREIA_ALTERNADOR
  CORREIA_ACESSORIOS

  VELA_IGNICAO

  AMORTECEDOR
  AMORTECEDOR_DIANTEIRO
  AMORTECEDOR_TRASEIRO
  BUCHA_SUSPENSAO
  PIVO_SUSPENSAO

  TERMINAL_DIRECAO
  ROLAMENTO_DIRECAO

  COXIM_MOTOR
  COXIM_CAMBIO

  BATERIA
  ESCOVA_ALTERNADOR
  ESCOVA_MOTOR_PARTIDA
  LAMPADA

  ROLAMENTO_RODA

  CABO_EMBREAGEM
  CABO_ACELERADOR
  CABO_FREIO

  FILTRO_AR
  FILTRO_OLEO
  FILTRO_COMBUSTIVEL
  FILTRO_CABINE

  CONSUMIVEL_OLEO_MOTOR
  CONSUMIVEL_FLUIDO_FREIO
  CONSUMIVEL_FLUIDO_ARREFECIMENTO

  MANOPLA
  PEDALEIRA
}

//session
model auth {
  uuid   String    @id @unique @default(uuid())
  role   Tipo_User
  status Boolean   @default(true)

  pessoa            pessoa?
  historico_session historico_session[]
  historico_otp     historico_otp[]
  historico_senha   historico_senha[]
}

model historico_session {
  uuid         String   @id @unique @default(uuid())
  uuid_auth    String
  record_login DateTime @default(now())
  expira_time  DateTime
  auth         auth     @relation(fields: [uuid_auth], references: [uuid])
}

model historico_otp {
  uuid          String   @id
  code_otp      String
  record_create DateTime @default(now())
  auth          auth     @relation(fields: [uuid], references: [uuid])
}

model historico_senha {
  uuid          String   @id
  senha         String
  record_update DateTime @default(now())
  status        Boolean  @default(true)
  auth          auth     @relation(fields: [uuid], references: [uuid])
}

model pessoa {
  uuid               String        @id @unique
  num_cpf            String        @unique
  num_cnpj           String?
  data_nascimento    DateTime
  numero_cel         String        @unique
  correio_eletronico String        @unique
  codigo_postal      String
  numero_residencial String
  auth               auth          @relation(fields: [uuid], references: [uuid])
  rede_social        rede_social[]
}

model rede_social {
  id          Int    @id @unique @default(autoincrement())
  uuid_pessoa String
  url         String
  pessoa      pessoa @relation(fields: [uuid_pessoa], references: [uuid])
}

model veiculo {
  uuid             String         @id @unique @default(uuid())
  modelo           String
  tipo             tipo_veiculo
  km               Float          @default(0)
  valor_manutencao Float          @default(0)
  valor_seguro     Float          @default(0)
  valor_aluguel    Float          @default(0)
  placa_veicular   String?
  renavam          String?
  chassi           String?
  foto             String?
  status           status_veiculo @default(LIVRE)
  veiculo_peca     veiculo_peca[]
}

model peca {
  id           Int            @id @unique @default(autoincrement())
  tipo         tipo_peca
  marca        String
  km_troca     Float
  preco_medio  Float
  km_aviso     Float
  logo         String?
  veiculo_peca veiculo_peca[]
}

model veiculo_peca {
  id                Int       @id @unique @default(autoincrement())
  veiculo_uuid      String
  peca_id           Int
  km_registro       Float
  data_ultima_troca DateTime?
  veiculo           veiculo   @relation(fields: [veiculo_uuid], references: [uuid])
  peca              peca      @relation(fields: [peca_id], references: [id])
}
